<kotlin text="// This was inserted by the user.">
<kotlin json_kt.text="import kotlinx.serialization.*">
<kotlin json_kt.text="import kotlinx.serialization.json.*">

type kind = [
  | Root (* class name conflict *)
  | Thing of int
  | WOW <json name="wow">
  | Amaze <json name="!!!"> of string list
]

type frozen = [
  | A
  | B of int
]

type enum_sumtype = [
  | A
  | B
  | C
] <kotlin repr="enum">

type ('a, 'b) parametrized_record = {
  field_a: 'a;
  ~field_b: 'b list;
}

type 'a parametrized_tuple = ('a * 'a * int)

type root = {
  id <json name="ID">: string;
  await: bool;
  __init__: float;
  items: int list list;
  ?maybe: int option;
  ~extras: int list;
  ~answer <kotlin default="42">: int;
  aliased: alias;
  point: (float * float);
  kinds: kind list;
  assoc1: (float * int) list;
  assoc2: (string * int) list <json repr="object">;
  assoc3: (float * int) list <kotlin repr="map">;
  assoc4: (string * int) list <json repr="object"> <kotlin repr="map">;
  nullables: int nullable list;
  options: int option list;
  untyped_things: abstract list;
  parametrized_record: (int, float) parametrized_record;
  parametrized_tuple: kind parametrized_tuple;
}

type alias = int list

type pair = (string * int)

type recursive_class = {
  id: int;
  flag: bool;
  children: recursive_class list;
}

type default_list = {
  ~items: int list;
}
