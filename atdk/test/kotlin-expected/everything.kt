/* Generated by atdk from type definitions in everything.atd.

This implements classes for the types defined in 'everything.atd', providing
methods and functions to convert data from/to JSON.
*/

import kotlinx.serialization.*
import kotlinx.serialization.json.*

// ############################################################################
// # Private functions
// ############################################################################


// ############################################################################
// # Public classes
// ############################################################################


@Serializable
data class RecursiveClass(
    val id: Int,
    val flag: Boolean,
    val children: List<RecursiveClass>,
) {
    // Original type: recursive_class = { ... }

    fun toJson(): JsonElement {
        return Json.encodeToJsonElement(serializer(), this)
    }

    fun toJsonString(): String {
        return Json.encodeToString(serializer(), this)
    }

    companion object {
        fun fromJson(x: JsonElement): RecursiveClass {
            return Json.decodeFromJsonElement(serializer(), x)
        }

        fun fromJsonString(x: String): RecursiveClass {
            return Json.decodeFromString(serializer(), x)
        }
    }
}


@Serializable
sealed class Kind {
    // Original type: kind = [ ... ]

    @Serializable
    data object Root_: Kind()
    // Original type: kind = [ ... | Root | ... ]

    @Serializable
    data class Thing(val value: Int): Kind()
    // Original type: kind = [ ... | Thing of ... | ... ]

    @Serializable
    @SerialName("wow")
    data object WOW: Kind()
    // Original type: kind = [ ... | WOW | ... ]

    @Serializable
    @SerialName("!!!")
    data class Amaze(val value: List<String>): Kind()
    // Original type: kind = [ ... | Amaze of ... | ... ]
    // Original type: kind = { ... }

    fun toJson(): JsonElement {
        return Json.encodeToJsonElement(serializer(), this)
    }

    fun toJsonString(): String {
        return Json.encodeToString(serializer(), this)
    }

    companion object {
        fun fromJson(x: JsonElement): Kind {
            return Json.decodeFromJsonElement(serializer(), x)
        }

        fun fromJsonString(x: String): Kind {
            return Json.decodeFromString(serializer(), x)
        }
    }
}


@Serializable
data class Alias(val wrapped: List<Int>) {
    // Original type: alias = { ... }

    fun toJson(): JsonElement {
        return Json.encodeToJsonElement(serializer(), this)
    }

    fun toJsonString(): String {
        return Json.encodeToString(serializer(), this)
    }

    companion object {
        fun fromJson(x: JsonElement): Alias {
            return Json.decodeFromJsonElement(serializer(), x)
        }

        fun fromJsonString(x: String): Alias {
            return Json.decodeFromString(serializer(), x)
        }
    }
}


@Serializable
data class KindParametrizedTuple(val wrapped: Triple<Kind, Kind, Int>) {
    // Original type: _kind_parametrized_tuple = { ... }

    fun toJson(): JsonElement {
        return Json.encodeToJsonElement(serializer(), this)
    }

    fun toJsonString(): String {
        return Json.encodeToString(serializer(), this)
    }

    companion object {
        fun fromJson(x: JsonElement): KindParametrizedTuple {
            return Json.decodeFromJsonElement(serializer(), x)
        }

        fun fromJsonString(x: String): KindParametrizedTuple {
            return Json.decodeFromString(serializer(), x)
        }
    }
}


@Serializable
data class IntFloatParametrizedRecord(
    val fieldA: Int,
    val fieldB: List<Double> = listOf(),
) {
    // Original type: _int_float_parametrized_record = { ... }

    fun toJson(): JsonElement {
        return Json.encodeToJsonElement(serializer(), this)
    }

    fun toJsonString(): String {
        return Json.encodeToString(serializer(), this)
    }

    companion object {
        fun fromJson(x: JsonElement): IntFloatParametrizedRecord {
            return Json.decodeFromJsonElement(serializer(), x)
        }

        fun fromJsonString(x: String): IntFloatParametrizedRecord {
            return Json.decodeFromString(serializer(), x)
        }
    }
}


@Serializable
data class Root(
    val id: String,
    val await: Boolean,
    val xInit: Double,
    val items: List<List<Int>>,
    val aliased: Alias,
    val point: Pair<Double, Double>,
    val kinds: List<Kind>,
    val assoc1: List<Pair<Double, Int>>,
    val assoc2: List<Pair<String, Int>>,
    val assoc3: Map<Double, Int>,
    val assoc4: Map<String, Int>,
    val nullables: List<Int?>,
    val options: List<Int?>,
    val untypedThings: List<JsonElement>,
    val parametrizedRecord: IntFloatParametrizedRecord,
    val parametrizedTuple: KindParametrizedTuple,
    val maybe: Int? = null,
    val extras: List<Int> = listOf(),
    val answer: Int = 42,
) {
    // Original type: root = { ... }

    fun toJson(): JsonElement {
        return Json.encodeToJsonElement(serializer(), this)
    }

    fun toJsonString(): String {
        return Json.encodeToString(serializer(), this)
    }

    companion object {
        fun fromJson(x: JsonElement): Root {
            return Json.decodeFromJsonElement(serializer(), x)
        }

        fun fromJsonString(x: String): Root {
            return Json.decodeFromString(serializer(), x)
        }
    }
}


@Serializable
data class Pair_(val wrapped: Pair<String, Int>) {
    // Original type: pair = { ... }

    fun toJson(): JsonElement {
        return Json.encodeToJsonElement(serializer(), this)
    }

    fun toJsonString(): String {
        return Json.encodeToString(serializer(), this)
    }

    companion object {
        fun fromJson(x: JsonElement): Pair_ {
            return Json.decodeFromJsonElement(serializer(), x)
        }

        fun fromJsonString(x: String): Pair_ {
            return Json.decodeFromString(serializer(), x)
        }
    }
}


@Serializable
sealed class Frozen {
    // Original type: frozen = [ ... ]

    @Serializable
    data object A: Frozen()
    // Original type: frozen = [ ... | A | ... ]

    @Serializable
    data class B(val value: Int): Frozen()
    // Original type: frozen = [ ... | B of ... | ... ]
    // Original type: frozen = { ... }

    fun toJson(): JsonElement {
        return Json.encodeToJsonElement(serializer(), this)
    }

    fun toJsonString(): String {
        return Json.encodeToString(serializer(), this)
    }

    companion object {
        fun fromJson(x: JsonElement): Frozen {
            return Json.decodeFromJsonElement(serializer(), x)
        }

        fun fromJsonString(x: String): Frozen {
            return Json.decodeFromString(serializer(), x)
        }
    }
}


@Serializable
enum class EnumSumtype {
    A,
    B,
    C;
    // Original type: enum_sumtype = { ... }

    fun toJson(): JsonElement {
        return Json.encodeToJsonElement(serializer(), this)
    }

    fun toJsonString(): String {
        return Json.encodeToString(serializer(), this)
    }

    companion object {
        fun fromJson(x: JsonElement): EnumSumtype {
            return Json.decodeFromJsonElement(serializer(), x)
        }

        fun fromJsonString(x: String): EnumSumtype {
            return Json.decodeFromString(serializer(), x)
        }
    }
}


@Serializable
data class DefaultList(
    val items: List<Int> = listOf(),
) {
    // Original type: default_list = { ... }

    fun toJson(): JsonElement {
        return Json.encodeToJsonElement(serializer(), this)
    }

    fun toJsonString(): String {
        return Json.encodeToString(serializer(), this)
    }

    companion object {
        fun fromJson(x: JsonElement): DefaultList {
            return Json.decodeFromJsonElement(serializer(), x)
        }

        fun fromJsonString(x: String): DefaultList {
            return Json.decodeFromString(serializer(), x)
        }
    }
}
