
// Generated by atdd from type definitions in everything.atd.
// This implements classes for the types defined in 'everything.atd', providing
// methods and functions to convert data from/to JSON.

// ############################################################################
// # Private functions
// ############################################################################

module everything;

import std.algorithm : map;
import std.array : array;
import std.conv;
import std.format;
import std.json;
import std.sumtype;
import std.traits : isCallable;
import std.typecons : nullable, Nullable, tuple, Tuple, Typedef, TypedefType;

private
{
  class AtdException : Exception
  {
      @safe this(string msg, string file = __FILE__, size_t line = __LINE__)
      {
          super(msg, file, line);
      }
  }

  // workaround to make toDelegate callable from safe
  @trusted auto toDelegate(F)(auto ref F fp) if (isCallable!F)
  {
    import std.functional;
    return std.functional.toDelegate(fp);
  }

  template RemoveTypedef(T)
  {
      static if (is(T : Typedef!Arg, Arg))
          alias RemoveTypedef = RemoveTypedef!Arg;
      else
          alias RemoveTypedef = T;
  }
  
  auto _atd_missing_json_field(T)(string typeName, string jsonFieldName)
  {
      throw new AtdException("missing field %s in JSON object of type %s".format(typeName, jsonFieldName));
      // hack so that the return type is the same as the field we are instantiating
      return T.init;
  }
  
  auto _atd_bad_json(T)(string expectedType, T jsonValue)
  {
      string valueStr = jsonValue.to!string;
      if (valueStr.length > 200)
      {
          valueStr = valueStr[0 .. 200];
      }
  
      return new AtdException(
          "incompatible JSON value where type '%s' was expected: %s".format(
              expectedType, valueStr
      ));
  }
  
  auto _atd_bad_d(T)(string expectedType, T jsonValue)
  {
      string valueStr = jsonValue.to!string;
      if (valueStr.length > 200)
      {
          valueStr = valueStr[0 .. 200];
      }
  
      return new AtdException(
          "incompatible D value where type '%s' was expected: %s".format(
              expectedType, valueStr
      ));
  }
  
  auto _atd_read_unit(JSONValue x)
  {
      if (x.isNull)
          return null;
      else
          throw _atd_bad_json("unit", x);
  }
  
  auto _atd_read_bool(JSONValue x)
  {
      try
          return x.boolean;
      catch (JSONException e)
          throw _atd_bad_json("bool", x);
  }
  
  auto _atd_read_int(JSONValue x)
  {
      try
          return cast(int) x.integer;
      catch (JSONException e)
          throw _atd_bad_json("int", x);
  }
  
  auto _atd_read_float(JSONValue x)
  {
      try
          return cast(float) x.floating;
      catch (JSONException e)
          throw _atd_bad_json("float", x);
  }
  
  auto _atd_read_string(JSONValue x)
  {
      try
          return x.str;
      catch (JSONException e)
          throw _atd_bad_json("string", x);
  }
  
  auto _atd_read_list(E)(E delegate(JSONValue) @safe readElements)
  {
      return (JSONValue jsonVal) @trusted {
          if (jsonVal.type != JSONType.array)
              throw _atd_bad_json("array", jsonVal);
          auto list = jsonVal.array;
          return array(list.map!readElements());
      };
  }
  
  auto _atd_read_object_to_assoc_array(V)(
      V delegate(JSONValue) @safe readValue)
  {
      auto fun = (JSONValue jsonVal) @trusted {
          if (jsonVal.type != JSONType.object)
              throw _atd_bad_json("object", jsonVal);
          V[string] ret;
          foreach (key, val; jsonVal.object)
              ret[key] = readValue(val);
          return ret;
      };
      return fun;
  }
  
  auto _atd_read_array_to_assoc_dict(K, V)(
      K delegate(JSONValue) @safe readKey,
      V delegate(JSONValue) @safe readValue)
  {
      auto fun = (JSONValue jsonVal) @trusted {
          if (jsonVal.type != JSONType.array)
              throw _atd_bad_json("list", jsonVal);
          V[K] ret;
          foreach (jsonInnerVal; jsonVal.array)
          {
              if (jsonInnerVal.type != JSONType.array)
                  throw _atd_bad_json("list", jsonInnerVal);
              ret[readKey(jsonInnerVal[0])] = readValue(jsonInnerVal[1]);
          }
          return ret;
      };
      return fun;
  }
  
  auto _atd_read_object_to_tuple_list(T)(
      T delegate(JSONValue) @safe readValue)
  {
      auto fun = (JSONValue jsonVal) @trusted {
          if (jsonVal.type != JSONType.object)
              throw _atd_bad_json("object", jsonVal);
          auto tupList = new Tuple!(string, T)[](jsonVal.object.length);
          int i = 0;
          foreach (key, val; jsonVal.object)
              tupList[i++] = tuple(key, readValue(val));
          return tupList;
      };
      return fun;
  }
  
  auto _atd_read_nullable(T)(T delegate(JSONValue) @safe readElm)
  {
      auto fun = (JSONValue e) @safe {
          if (e.isNull)
              return Nullable!T.init;
          else
              return Nullable!T(readElm(e));
      };
      return fun;
  }
  
  auto _atd_read_option(T)(T delegate(JSONValue) @safe readElm)
  {
      auto fun = (JSONValue e) @trusted {
          if (e.type == JSONType.string && e.str == "None")
              return Nullable!T.init;
          else if (e.type == JSONType.array && e.array.length == 2 && e[0].type == JSONType.string && e[0].str == "Some")
              return Nullable!T(readElm(e[1]));
          else
              throw _atd_bad_json("option", e);
      };
      return fun;
  }

  auto _atd_read_wrap(Wrapped, Unwrapped)(Wrapped delegate(JSONValue) @safe readElm, Unwrapped delegate(Wrapped) @safe unwrap)
  {
    auto fun = (JSONValue e) @safe {
        auto elm = readElm(e);
        return unwrap(elm);
    };
    return fun;
  }
  
  // this whole set of function could be remplaced by one templated _atd_write_value function
  // not sure it is what we want though
  
  auto _atd_write_unit(typeof(null) n)
  {
      return JSONValue(null);
  }
  
  auto _atd_write_bool(bool b)
  {
      return JSONValue(b);
  }
  
  auto _atd_write_int(int i)
  {
      return JSONValue(i);
  }
  
  auto _atd_write_float(float f)
  {
      return JSONValue(f);
  }
  
  auto _atd_write_string(string s)
  {
      return JSONValue(s);
  }
  
  auto _atd_write_list(T)(JSONValue delegate(T) @safe writeElm)
  {
      return (T[] list) @safe { return JSONValue(array(list.map!writeElm())); };
  }
  
  auto _atd_write_assoc_array_to_object(T)(
      JSONValue delegate(T) @safe writeValue)
  {
      auto fun = (T[string] assocArr) @safe {
          JSONValue[string] ret;
          foreach (key, val; assocArr)
              ret[key] = writeValue(val);
          return JSONValue(ret);
      };
      return fun;
  }
  
  auto _atd_write_assoc_dict_to_array(K, V)(
      JSONValue delegate(K) @safe writeKey,
      JSONValue delegate(V) @safe writeValue)
  {
      auto fun = (V[K] assocArr) @safe {
          JSONValue[] ret;
          foreach (key, val; assocArr)
              ret ~= JSONValue([writeKey(key), writeValue(val)]);
          return JSONValue(ret);
      };
      return fun;
  }
  
  auto _atd_write_tuple_list_to_object(T)(
      JSONValue delegate(T) @safe writeValue)
  {
      auto fun = (Tuple!(string, T)[] tupList) @safe {
          JSONValue[string] ret;
          foreach (tup; tupList)
              ret[tup[0]] = writeValue(tup[1]);
          return JSONValue(ret);
      };
      return fun;
  }
  
  auto _atd_write_nullable(T)(JSONValue delegate(T) @safe writeElm)
  {
      auto fun = (Nullable!T elm) @safe {
          if (elm.isNull)
              return JSONValue(null);
          else
              return writeElm(elm.get);
      };
      return fun;
  }
  
  auto _atd_write_option(T)(JSONValue delegate(T) @safe writeElm)
  {
      auto fun = (Nullable!T elm) @safe {
          if (elm.isNull)
              return JSONValue("None");
          else
              return JSONValue([JSONValue("Some"), writeElm(elm.get)]);
      };
      return fun;
  }

  auto _atd_write_wrap(Wrapped, Unwrapped)(JSONValue delegate(Wrapped) @safe writeElm, Wrapped delegate(Unwrapped) @safe wrap)
  {
    auto fun = (Unwrapped elm) @safe {
        auto e = wrap(elm);
        return writeElm(e);
    };
    return fun;
  }
}

  // ############################################################################
  // # Public classes
  // ############################################################################
  
  auto fromJsonString(T)(string s)
  {
      JSONValue res = parseJSON(s);
      return res.fromJson!T;
  }
  
  auto toJsonString(T)(T obj)
  {
    JSONValue res = obj.toJson!T;
    return res.toString;
  }
  
  auto unwrapAlias(T)(T e) if (is(T : Typedef!Arg, Arg))
  {
      return cast(TypedefType!T) e;
  }
    
  auto wrapAlias(T)(TypedefType!T e) if (is(T : Typedef!Arg, Arg))
  {
      return cast(T) e;
  }

  


import std.stdint : uint32_t, uint16_t;


struct RecursiveClass {
    int id;
    bool flag;
    RecursiveClass[] children;
}

@trusted RecursiveClass fromJson(T : RecursiveClass)(JSONValue x) {
    RecursiveClass obj;
    obj.id = ("id" in x) ? _atd_read_int(x["id"]) : _atd_missing_json_field!(typeof(obj.id))("RecursiveClass", "id");
    obj.flag = ("flag" in x) ? _atd_read_bool(x["flag"]) : _atd_missing_json_field!(typeof(obj.flag))("RecursiveClass", "flag");
    obj.children = ("children" in x) ? _atd_read_list((&fromJson!RecursiveClass).toDelegate)(x["children"]) : _atd_missing_json_field!(typeof(obj.children))("RecursiveClass", "children");
    return obj;
}
@trusted JSONValue toJson(T : RecursiveClass)(T obj) {
    JSONValue res;
    res["id"] = _atd_write_int(obj.id);
    res["flag"] = _atd_write_bool(obj.flag);
    res["children"] = _atd_write_list(((RemoveTypedef!(RecursiveClass) x) => x.toJson!(RecursiveClass)))(obj.children);
    return res;
}


alias St = Typedef!(int, (int).init, "St");
@trusted JSONValue toJson(T : St)(int e) {
    return _atd_write_int(e);
}
@trusted string toJsonString(T : St)(int obj) {
    return obj.toJson!(St).toString;
}
@trusted int fromJson(T : St)(JSONValue e) {
    return _atd_read_int(e);
}
@trusted int fromJsonString(T : St)(string s) {
    return parseJSON(s).fromJson!(St);
}


// Original type: kind = [ ... | Root | ... ]
struct Root_ {}
@trusted JSONValue toJson(T : Root_)(T e) {
    return JSONValue("Root");
}


// Original type: kind = [ ... | Thing of ... | ... ]
struct Thing { int value; }
@trusted JSONValue toJson(T : Thing)(T e) {
    return JSONValue([JSONValue("Thing"), _atd_write_int(e.value)]);
}


// Original type: kind = [ ... | WOW | ... ]
struct WOW {}
@trusted JSONValue toJson(T : WOW)(T e) {
    return JSONValue("wow");
}


// Original type: kind = [ ... | Amaze of ... | ... ]
struct Amaze { string[] value; }
@trusted JSONValue toJson(T : Amaze)(T e) {
    return JSONValue([JSONValue("!!!"), _atd_write_list((&_atd_write_string).toDelegate)(e.value)]);
}


alias Kind = SumType!(Root_, Thing, WOW, Amaze);

@trusted Kind fromJson(T : Kind)(JSONValue x) {
    if (x.type == JSONType.string) {
        if (x.str == "Root") 
            return Kind(Root_());
        if (x.str == "wow") 
            return Kind(WOW());
        throw _atd_bad_json("Kind", x);
    }
    if (x.type == JSONType.array && x.array.length == 2 && x[0].type == JSONType.string) {
        string cons = x[0].str;
        if (cons == "Thing")
            return Kind(Thing(_atd_read_int(x[1])));
        if (cons == "!!!")
            return Kind(Amaze(_atd_read_list((&_atd_read_string).toDelegate)(x[1])));
        throw _atd_bad_json("Kind", x);
    }
    throw _atd_bad_json("Kind", x);
}

@trusted JSONValue toJson(T : Kind)(T x) {
    return x.match!(
    (Root_ v) => v.toJson!(Root_),
(Thing v) => v.toJson!(Thing),
(WOW v) => v.toJson!(WOW),
(Amaze v) => v.toJson!(Amaze)
    );
}


alias Alias3 = Typedef!(uint32_t, (uint32_t).init, "Alias3");
@trusted JSONValue toJson(T : Alias3)(uint32_t e) {
    return _atd_write_wrap((&_atd_write_int).toDelegate, (uint32_t e) => to!int(e))(e);
}
@trusted string toJsonString(T : Alias3)(uint32_t obj) {
    return obj.toJson!(Alias3).toString;
}
@trusted uint32_t fromJson(T : Alias3)(JSONValue e) {
    return _atd_read_wrap((&_atd_read_int).toDelegate, (int e) => to!uint32_t(e))(e);
}
@trusted uint32_t fromJsonString(T : Alias3)(string s) {
    return parseJSON(s).fromJson!(Alias3);
}


alias AliasOfAliasNotWrapped = Typedef!(RemoveTypedef!(Alias3), (RemoveTypedef!(Alias3)).init, "AliasOfAliasNotWrapped");
@trusted JSONValue toJson(T : AliasOfAliasNotWrapped)(RemoveTypedef!(Alias3) e) {
    return ((RemoveTypedef!(Alias3) x) => x.toJson!(Alias3))(e);
}
@trusted string toJsonString(T : AliasOfAliasNotWrapped)(RemoveTypedef!(Alias3) obj) {
    return obj.toJson!(AliasOfAliasNotWrapped).toString;
}
@trusted RemoveTypedef!(Alias3) fromJson(T : AliasOfAliasNotWrapped)(JSONValue e) {
    return fromJson!Alias3(e);
}
@trusted RemoveTypedef!(Alias3) fromJsonString(T : AliasOfAliasNotWrapped)(string s) {
    return parseJSON(s).fromJson!(AliasOfAliasNotWrapped);
}


alias AliasOfAliasOfAlias = Typedef!(RemoveTypedef!(AliasOfAliasNotWrapped), (RemoveTypedef!(AliasOfAliasNotWrapped)).init, "AliasOfAliasOfAlias");
@trusted JSONValue toJson(T : AliasOfAliasOfAlias)(RemoveTypedef!(AliasOfAliasNotWrapped) e) {
    return ((RemoveTypedef!(AliasOfAliasNotWrapped) x) => x.toJson!(AliasOfAliasNotWrapped))(e);
}
@trusted string toJsonString(T : AliasOfAliasOfAlias)(RemoveTypedef!(AliasOfAliasNotWrapped) obj) {
    return obj.toJson!(AliasOfAliasOfAlias).toString;
}
@trusted RemoveTypedef!(AliasOfAliasNotWrapped) fromJson(T : AliasOfAliasOfAlias)(JSONValue e) {
    return fromJson!AliasOfAliasNotWrapped(e);
}
@trusted RemoveTypedef!(AliasOfAliasNotWrapped) fromJsonString(T : AliasOfAliasOfAlias)(string s) {
    return parseJSON(s).fromJson!(AliasOfAliasOfAlias);
}


alias Alias = Typedef!(int[], (int[]).init, "Alias");
@trusted JSONValue toJson(T : Alias)(int[] e) {
    return _atd_write_list((&_atd_write_int).toDelegate)(e);
}
@trusted string toJsonString(T : Alias)(int[] obj) {
    return obj.toJson!(Alias).toString;
}
@trusted int[] fromJson(T : Alias)(JSONValue e) {
    return _atd_read_list((&_atd_read_int).toDelegate)(e);
}
@trusted int[] fromJsonString(T : Alias)(string s) {
    return parseJSON(s).fromJson!(Alias);
}


alias KindParametrizedTuple = Typedef!(Tuple!(Kind, Kind, int), (Tuple!(Kind, Kind, int)).init, "KindParametrizedTuple");
@trusted JSONValue toJson(T : KindParametrizedTuple)(Tuple!(Kind, Kind, int) e) {
    return ((Tuple!(Kind, Kind, int) x) => JSONValue([((RemoveTypedef!(Kind) x) => x.toJson!(Kind))(x[0]), ((RemoveTypedef!(Kind) x) => x.toJson!(Kind))(x[1]), _atd_write_int(x[2])]))(e);
}
@trusted string toJsonString(T : KindParametrizedTuple)(Tuple!(Kind, Kind, int) obj) {
    return obj.toJson!(KindParametrizedTuple).toString;
}
@trusted Tuple!(Kind, Kind, int) fromJson(T : KindParametrizedTuple)(JSONValue e) {
    return ((JSONValue x) @trusted { 
    if (x.type != JSONType.array || x.array.length != 3)
      throw _atd_bad_json("Tuple of size 3", x);
    return tuple(fromJson!Kind(x[0]), fromJson!Kind(x[1]), _atd_read_int(x[2]));
  })(e);
}
@trusted Tuple!(Kind, Kind, int) fromJsonString(T : KindParametrizedTuple)(string s) {
    return parseJSON(s).fromJson!(KindParametrizedTuple);
}


struct IntFloatParametrizedRecord {
    int field_a;
    float[] field_b = [];
}

@trusted IntFloatParametrizedRecord fromJson(T : IntFloatParametrizedRecord)(JSONValue x) {
    IntFloatParametrizedRecord obj;
    obj.field_a = ("field_a" in x) ? _atd_read_int(x["field_a"]) : _atd_missing_json_field!(typeof(obj.field_a))("IntFloatParametrizedRecord", "field_a");
    obj.field_b = ("field_b" in x) ? _atd_read_list((&_atd_read_float).toDelegate)(x["field_b"]) : [];
    return obj;
}
@trusted JSONValue toJson(T : IntFloatParametrizedRecord)(T obj) {
    JSONValue res;
    res["field_a"] = _atd_write_int(obj.field_a);
    res["field_b"] = _atd_write_list((&_atd_write_float).toDelegate)(obj.field_b);
    return res;
}


struct Root {
    string id;
    bool await;
    int integer;
    float x___init__;
    float float_with_auto_default = 0.0;
    float float_with_default = 0.1;
    int[][] items;
    Nullable!int maybe;
    int[] extras = [];
    int answer = 42;
    RemoveTypedef!(Alias) aliased;
    Tuple!(float, float) point;
    Kind[] kinds;
    Tuple!(float, int)[] assoc1;
    Tuple!(string, int)[] assoc2;
    int[float] assoc3;
    int[string] assoc4;
    Nullable!int[] nullables;
    Nullable!int[] options;
    JSONValue[] untyped_things;
    RemoveTypedef!(IntFloatParametrizedRecord) parametrized_record;
    RemoveTypedef!(KindParametrizedTuple) parametrized_tuple;
    uint16_t wrapped;
    RemoveTypedef!(AliasOfAliasOfAlias) aaa;
}

@trusted Root fromJson(T : Root)(JSONValue x) {
    Root obj;
    obj.id = ("ID" in x) ? _atd_read_string(x["ID"]) : _atd_missing_json_field!(typeof(obj.id))("Root", "ID");
    obj.await = ("await" in x) ? _atd_read_bool(x["await"]) : _atd_missing_json_field!(typeof(obj.await))("Root", "await");
    obj.integer = ("integer" in x) ? _atd_read_int(x["integer"]) : _atd_missing_json_field!(typeof(obj.integer))("Root", "integer");
    obj.x___init__ = ("__init__" in x) ? _atd_read_float(x["__init__"]) : _atd_missing_json_field!(typeof(obj.x___init__))("Root", "__init__");
    obj.float_with_auto_default = ("float_with_auto_default" in x) ? _atd_read_float(x["float_with_auto_default"]) : 0.0;
    obj.float_with_default = ("float_with_default" in x) ? _atd_read_float(x["float_with_default"]) : 0.1;
    obj.items = ("items" in x) ? _atd_read_list(_atd_read_list((&_atd_read_int).toDelegate))(x["items"]) : _atd_missing_json_field!(typeof(obj.items))("Root", "items");
    obj.maybe = ("maybe" in x) ? _atd_read_option((&_atd_read_int).toDelegate)(x["maybe"]) : typeof(obj.maybe).init;
    obj.extras = ("extras" in x) ? _atd_read_list((&_atd_read_int).toDelegate)(x["extras"]) : [];
    obj.answer = ("answer" in x) ? _atd_read_int(x["answer"]) : 42;
    obj.aliased = ("aliased" in x) ? fromJson!Alias(x["aliased"]) : _atd_missing_json_field!(typeof(obj.aliased))("Root", "aliased");
    obj.point = ("point" in x) ? ((JSONValue x) @trusted { 
    if (x.type != JSONType.array || x.array.length != 2)
      throw _atd_bad_json("Tuple of size 2", x);
    return tuple(_atd_read_float(x[0]), _atd_read_float(x[1]));
  })(x["point"]) : _atd_missing_json_field!(typeof(obj.point))("Root", "point");
    obj.kinds = ("kinds" in x) ? _atd_read_list((&fromJson!Kind).toDelegate)(x["kinds"]) : _atd_missing_json_field!(typeof(obj.kinds))("Root", "kinds");
    obj.assoc1 = ("assoc1" in x) ? _atd_read_list(((JSONValue x) @trusted { 
    if (x.type != JSONType.array || x.array.length != 2)
      throw _atd_bad_json("Tuple of size 2", x);
    return tuple(_atd_read_float(x[0]), _atd_read_int(x[1]));
  }))(x["assoc1"]) : _atd_missing_json_field!(typeof(obj.assoc1))("Root", "assoc1");
    obj.assoc2 = ("assoc2" in x) ? _atd_read_object_to_tuple_list((&_atd_read_int).toDelegate)(x["assoc2"]) : _atd_missing_json_field!(typeof(obj.assoc2))("Root", "assoc2");
    obj.assoc3 = ("assoc3" in x) ? _atd_read_array_to_assoc_dict((&_atd_read_float).toDelegate, (&_atd_read_int).toDelegate)(x["assoc3"]) : _atd_missing_json_field!(typeof(obj.assoc3))("Root", "assoc3");
    obj.assoc4 = ("assoc4" in x) ? _atd_read_object_to_assoc_array((&_atd_read_int).toDelegate)(x["assoc4"]) : _atd_missing_json_field!(typeof(obj.assoc4))("Root", "assoc4");
    obj.nullables = ("nullables" in x) ? _atd_read_list(_atd_read_nullable((&_atd_read_int).toDelegate))(x["nullables"]) : _atd_missing_json_field!(typeof(obj.nullables))("Root", "nullables");
    obj.options = ("options" in x) ? _atd_read_list(_atd_read_option((&_atd_read_int).toDelegate))(x["options"]) : _atd_missing_json_field!(typeof(obj.options))("Root", "options");
    obj.untyped_things = ("untyped_things" in x) ? _atd_read_list(((JSONValue x) => x))(x["untyped_things"]) : _atd_missing_json_field!(typeof(obj.untyped_things))("Root", "untyped_things");
    obj.parametrized_record = ("parametrized_record" in x) ? fromJson!IntFloatParametrizedRecord(x["parametrized_record"]) : _atd_missing_json_field!(typeof(obj.parametrized_record))("Root", "parametrized_record");
    obj.parametrized_tuple = ("parametrized_tuple" in x) ? fromJson!KindParametrizedTuple(x["parametrized_tuple"]) : _atd_missing_json_field!(typeof(obj.parametrized_tuple))("Root", "parametrized_tuple");
    obj.wrapped = ("wrapped" in x) ? _atd_read_wrap((&fromJson!St).toDelegate, (RemoveTypedef!(St) e) => to!uint16_t(e))(x["wrapped"]) : _atd_missing_json_field!(typeof(obj.wrapped))("Root", "wrapped");
    obj.aaa = ("aaa" in x) ? fromJson!AliasOfAliasOfAlias(x["aaa"]) : _atd_missing_json_field!(typeof(obj.aaa))("Root", "aaa");
    return obj;
}
@trusted JSONValue toJson(T : Root)(T obj) {
    JSONValue res;
    res["ID"] = _atd_write_string(obj.id);
    res["await"] = _atd_write_bool(obj.await);
    res["integer"] = _atd_write_int(obj.integer);
    res["__init__"] = _atd_write_float(obj.x___init__);
    res["float_with_auto_default"] = _atd_write_float(obj.float_with_auto_default);
    res["float_with_default"] = _atd_write_float(obj.float_with_default);
    res["items"] = _atd_write_list(_atd_write_list((&_atd_write_int).toDelegate))(obj.items);
    if (!obj.maybe.isNull)
        res["maybe"] = _atd_write_option((&_atd_write_int).toDelegate)(obj.maybe);
    res["extras"] = _atd_write_list((&_atd_write_int).toDelegate)(obj.extras);
    res["answer"] = _atd_write_int(obj.answer);
    res["aliased"] = ((RemoveTypedef!(Alias) x) => x.toJson!(Alias))(obj.aliased);
    res["point"] = ((Tuple!(float, float) x) => JSONValue([_atd_write_float(x[0]), _atd_write_float(x[1])]))(obj.point);
    res["kinds"] = _atd_write_list(((RemoveTypedef!(Kind) x) => x.toJson!(Kind)))(obj.kinds);
    res["assoc1"] = _atd_write_list(((Tuple!(float, int) x) => JSONValue([_atd_write_float(x[0]), _atd_write_int(x[1])])))(obj.assoc1);
    res["assoc2"] = _atd_write_tuple_list_to_object((&_atd_write_int).toDelegate)(obj.assoc2);
    res["assoc3"] = _atd_write_assoc_dict_to_array((&_atd_write_float).toDelegate, (&_atd_write_int).toDelegate)(obj.assoc3);
    res["assoc4"] = _atd_write_assoc_array_to_object((&_atd_write_int).toDelegate)(obj.assoc4);
    res["nullables"] = _atd_write_list(_atd_write_nullable((&_atd_write_int).toDelegate))(obj.nullables);
    res["options"] = _atd_write_list(_atd_write_option((&_atd_write_int).toDelegate))(obj.options);
    res["untyped_things"] = _atd_write_list((JSONValue x) => x)(obj.untyped_things);
    res["parametrized_record"] = ((RemoveTypedef!(IntFloatParametrizedRecord) x) => x.toJson!(IntFloatParametrizedRecord))(obj.parametrized_record);
    res["parametrized_tuple"] = ((RemoveTypedef!(KindParametrizedTuple) x) => x.toJson!(KindParametrizedTuple))(obj.parametrized_tuple);
    res["wrapped"] = _atd_write_wrap(((RemoveTypedef!(St) x) => x.toJson!(St)), (uint16_t e) => to!int(e))(obj.wrapped);
    res["aaa"] = ((RemoveTypedef!(AliasOfAliasOfAlias) x) => x.toJson!(AliasOfAliasOfAlias))(obj.aaa);
    return res;
}


struct RequireField {
    string req;
}

@trusted RequireField fromJson(T : RequireField)(JSONValue x) {
    RequireField obj;
    obj.req = ("req" in x) ? _atd_read_string(x["req"]) : _atd_missing_json_field!(typeof(obj.req))("RequireField", "req");
    return obj;
}
@trusted JSONValue toJson(T : RequireField)(T obj) {
    JSONValue res;
    res["req"] = _atd_write_string(obj.req);
    return res;
}


struct RecordWithWrappedType {
    int item;
}

@trusted RecordWithWrappedType fromJson(T : RecordWithWrappedType)(JSONValue x) {
    RecordWithWrappedType obj;
    obj.item = ("item" in x) ? _atd_read_wrap((&_atd_read_string).toDelegate, (string e) => to!int(e))(x["item"]) : _atd_missing_json_field!(typeof(obj.item))("RecordWithWrappedType", "item");
    return obj;
}
@trusted JSONValue toJson(T : RecordWithWrappedType)(T obj) {
    JSONValue res;
    res["item"] = _atd_write_wrap((&_atd_write_string).toDelegate, (int e) => to!string(e))(obj.item);
    return res;
}


alias Pair = Typedef!(Tuple!(string, int), (Tuple!(string, int)).init, "Pair");
@trusted JSONValue toJson(T : Pair)(Tuple!(string, int) e) {
    return ((Tuple!(string, int) x) => JSONValue([_atd_write_string(x[0]), _atd_write_int(x[1])]))(e);
}
@trusted string toJsonString(T : Pair)(Tuple!(string, int) obj) {
    return obj.toJson!(Pair).toString;
}
@trusted Tuple!(string, int) fromJson(T : Pair)(JSONValue e) {
    return ((JSONValue x) @trusted { 
    if (x.type != JSONType.array || x.array.length != 2)
      throw _atd_bad_json("Tuple of size 2", x);
    return tuple(_atd_read_string(x[0]), _atd_read_int(x[1]));
  })(e);
}
@trusted Tuple!(string, int) fromJsonString(T : Pair)(string s) {
    return parseJSON(s).fromJson!(Pair);
}


// Original type: frozen = [ ... | A | ... ]
struct A {}
@trusted JSONValue toJson(T : A)(T e) {
    return JSONValue("A");
}


// Original type: frozen = [ ... | B of ... | ... ]
struct B { int value; }
@trusted JSONValue toJson(T : B)(T e) {
    return JSONValue([JSONValue("B"), _atd_write_int(e.value)]);
}


alias Frozen = SumType!(A, B);

@trusted Frozen fromJson(T : Frozen)(JSONValue x) {
    if (x.type == JSONType.string) {
        if (x.str == "A") 
            return Frozen(A());
        throw _atd_bad_json("Frozen", x);
    }
    if (x.type == JSONType.array && x.array.length == 2 && x[0].type == JSONType.string) {
        string cons = x[0].str;
        if (cons == "B")
            return Frozen(B(_atd_read_int(x[1])));
        throw _atd_bad_json("Frozen", x);
    }
    throw _atd_bad_json("Frozen", x);
}

@trusted JSONValue toJson(T : Frozen)(T x) {
    return x.match!(
    (A v) => v.toJson!(A),
(B v) => v.toJson!(B)
    );
}


struct DefaultList {
    int[] items = [];
}

@trusted DefaultList fromJson(T : DefaultList)(JSONValue x) {
    DefaultList obj;
    obj.items = ("items" in x) ? _atd_read_list((&_atd_read_int).toDelegate)(x["items"]) : [];
    return obj;
}
@trusted JSONValue toJson(T : DefaultList)(T obj) {
    JSONValue res;
    res["items"] = _atd_write_list((&_atd_write_int).toDelegate)(obj.items);
    return res;
}


alias AliasOfAlias = Typedef!(uint16_t, (uint16_t).init, "AliasOfAlias");
@trusted JSONValue toJson(T : AliasOfAlias)(uint16_t e) {
    return _atd_write_wrap(((RemoveTypedef!(Alias3) x) => x.toJson!(Alias3)), (uint16_t e) => to!uint32_t(e))(e);
}
@trusted string toJsonString(T : AliasOfAlias)(uint16_t obj) {
    return obj.toJson!(AliasOfAlias).toString;
}
@trusted uint16_t fromJson(T : AliasOfAlias)(JSONValue e) {
    return _atd_read_wrap((&fromJson!Alias3).toDelegate, (RemoveTypedef!(Alias3) e) => to!uint16_t(e))(e);
}
@trusted uint16_t fromJsonString(T : AliasOfAlias)(string s) {
    return parseJSON(s).fromJson!(AliasOfAlias);
}


alias Alias2 = Typedef!(int[], (int[]).init, "Alias2");
@trusted JSONValue toJson(T : Alias2)(int[] e) {
    return _atd_write_list((&_atd_write_int).toDelegate)(e);
}
@trusted string toJsonString(T : Alias2)(int[] obj) {
    return obj.toJson!(Alias2).toString;
}
@trusted int[] fromJson(T : Alias2)(JSONValue e) {
    return _atd_read_list((&_atd_read_int).toDelegate)(e);
}
@trusted int[] fromJsonString(T : Alias2)(string s) {
    return parseJSON(s).fromJson!(Alias2);
}
