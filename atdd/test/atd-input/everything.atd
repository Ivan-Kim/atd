type kind = [
  | Root (* class name conflict *)
  | Thing of int
  | WOW <json name="wow">
  | Amaze <json name="!!!"> of string list
]

type frozen = [
  | A
  | B of int
]

type ('a, 'b) parametrized_record = {
  field_a: 'a;
  ~field_b: 'b list;
}

type 'a parametrized_tuple = ('a * 'a * int)

type root = {
  id <json name="ID">: string;
  await: bool;
  integer: int;
  __init__ : float;
  ~float_with_auto_default: float;
  ~float_with_default <dlang default="0.1">: float;
  items: int list list;
  ?maybe: int option;
  ~extras: int list;
  ~answer <dlang default="42">: int;
  aliased: alias;
  point: (float * float);
  kinds: kind list;
  assoc1: (float * int) list;
  assoc2: (string * int) list <json repr="object">;
  assoc3: (float * int) list <dlang repr="dict">;
  assoc4: (string * int) list <json repr="object"> <dlang repr="dict">;
  nullables: int nullable list;
  options: int option list;
  untyped_things: abstract list;
  parametrized_record: (int, float) parametrized_record;
  parametrized_tuple: kind parametrized_tuple;
}

type alias = int list
type alias2 = int list

type pair = (string * int)

type require_field = {
  req: string;
}

type recursive_class = {
  id: int;
  flag: bool;
  children: recursive_class list;
}

type default_list = {
  ~items: int list;
}

type record_with_wrapped_type = {
  item: string wrap <dlang t="int" wrap="to!(string)" unwrap="to!(int)">;
}
